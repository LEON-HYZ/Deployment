version: "3.4"

services:

  # webserver to handle all traffic. This can use let's encrypt to generate a SSL cert.
  traefik:
    image: traefik:v1.7
    command:
      - --loglevel=INFO
      - --api
      # Entrypoints
      - --defaultentrypoints=https,http
      - --entryPoints=Name:http Address::${TRAEFIK_HTTP_PORT:-8000} ${TRAEFIK_HTTP_REDIRECT:-""}
      - --entryPoints=Name:https Address::${TRAEFIK_HTTPS_PORT:-8443} ${TRAEFIK_HTTPS_OPTIONS:-TLS}
      # Configuration for acme (https://letsencrypt.org/)
      - --acme=${TRAEFIK_ACME_ENABLE:-false}
      #- --acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --acme.email=${TRAEFIK_ACME_EMAIL:-""}
      - --acme.entrypoint=https
      - --acme.onhostrule=true
      - --acme.storage=/config/acme.json
      - --acme.httpchallenge.entrypoint=http
      - --acme.storage=/config/acme.json
      - --acme.acmelogging=true
      - --acme.domains=${TRAEFIK_ACME_HOST:-""}
      - --acme.domains=${TRAEFIK_ACME_HOST2:-""}
      - --acme.domains=${TRAEFIK_ACME_HOST3:-""}
      # DOCKER
      - --docker=true
      - --docker.endpoint=unix:///var/run/docker.sock
      - --docker.exposedbydefault=false
      - --docker.watch=true
      # - --docker.domain=docker.localhost
    restart: unless-stopped
    ports:
      - "${TRAEFIK_HTTP_PORT-8000}:${TRAEFIK_HTTP_PORT:-8000}"
      - "${TRAEFIK_HTTPS_PORT-8443}:${TRAEFIK_HTTPS_PORT:-8443}"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=traefik"
      - "traefik.port=8080"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefixStrip: /traefik"
      - "traefik.website.frontend.whiteList.sourceRange=${TRAEFIK_IPFILTER:-172.16.0.0/12}"
      # - "traefik.http.middlewares.test-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik:/config
    container_name: "traefik"

  # Allow to see all docker containers running, restart and see log files.
  portainer:
    image: portainer/portainer:latest
    command:
      - --admin-password=${PORTAINER_PASSWORD:-}
      - --host=unix:///var/run/docker.sock
    restart: unless-stopped
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.backend=portainer"
      - "traefik.port=9000"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefixStrip: /portainer"
      - "traefik.website.frontend.whiteList.sourceRange=${TRAEFIK_IPFILTER:-172.16.0.0/12}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data
    container_name: "portainer"

  db:
    image: postgres:latest
    volumes:
      - "pgvolume:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    env_file:
      - ".env"
    container_name: "db"

  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - db
      - traefik
    volumes:
      - "pga4volume:/var/lib/pgadmin"
    env_file:
      - ".env"
    container_name: "pgadmin"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=pgadmin"
      - "traefik.port=80"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefix:/pgadmin"
      - "traefik.website.frontend.whiteList.sourceRange=${TRAEFIK_IPFILTER:-172.16.0.0/12}"

  rabbitmq:
    image: rabbitmq:management
    container_name: "rabbitmq"
    env_file:
      - ".env"
    restart: unless-stopped
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management path_prefix "/rabbitmq"
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-guest}
    labels:
      - "traefik.enable=true"
      - "traefik.backend=rabbitmq"
      - "traefik.port=15672"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefix:/rabbitmq"
      - "traefik.website.frontend.whiteList.sourceRange=${TRAEFIK_IPFILTER:-172.16.0.0/12}"
  
  noderpcserver:
    image: ${DOCKER_REGISTRY-}rpcserver
    build:
      context: ./WebAPI
      dockerfile: ./rpcserver.Dockerfile
    env_file:
      - ".env"
    volumes:
        - "data:/data"
        - type: bind
          source: ./WebAPI/NodeRpcServer
          target: /NodeRpcServer
        - type: bind
          source: ./WebAPI/ct.proto
          target: /ct.proto
        - /NodeRpcServer/node_modules
    ports:
      - "50052:50052"
    container_name: "noderpcserver"
    command: sh -c "cd NodeRpcServer; npm install; npm rebuild; npm start"
  
  pythonrpcserver:
    image: ${DOCKER_REGISTRY-}rpcserver
    build:
      context: ./WebAPI
      dockerfile: ./rpcserver.Dockerfile
    env_file:
      - ".env"
    volumes:
        - "data:/data"
        - type: bind
          source: ./WebAPI/PythonRpcServer
          target: /PythonRpcServer
        - type: bind
          source: ./WebAPI/ct.proto
          target: /ct.proto
    ports:
      - "50051:50051"
    container_name: "pythonrpcserver"
    command: sh -c "python3 -m grpc_tools.protoc -I . --python_out=/PythonRpcServer/ --grpc_python_out=/PythonRpcServer/ ct.proto; python3 -u PythonRpcServer/server.py"
    #command: sh -c "tail -f /dev/null"
  
  frontend:
    image: node
    volumes:
      - ./FrontEnd:/frontend
      - /frontend/node_modules
    env_file:
      .env
    container_name: "frontend"

  api:
    image: ${DOCKER_REGISTRY-}api
    build:
      context: ./WebAPI
      target: api_publish
      dockerfile: ./API.Dockerfile
    volumes:
      - "data:/data"
      - type: bind
        source: ./WebAPI/ClassTranscribeServer/launchscript.sh
        target: /launchscript.sh
    container_name: "api"
    depends_on:
      - db
      - traefik
    env_file:
      - ".env"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=api"
      - "traefik.port=80"
      - "traefik.frontend.rule=${TRAEFIK_FRONTEND_RULE:-}PathPrefix: /api/,/data/,/swag"
      - "traefik.website.frontend.whiteList.sourceRange=${TRAEFIK_IPFILTER:-172.16.0.0/12}"
    command: sh -c "dotnet ef -p /src/ClassTranscribeDatabase/ClassTranscribeDatabase.csproj database update; dotnet /app/ClassTranscribeServer.dll"

  taskengine:
    image: ${DOCKER_REGISTRY-}taskengine
    build:
      context: ./WebAPI
      target: taskengine_publish
      dockerfile: ./TaskEngine.Dockerfile
    volumes:
      - "data:/data"
      - type: bind
        source: ./WebAPI/TaskEngine/launchscript.sh
        target: /launchscript.sh
    container_name: "taskengine"
    depends_on:
      - db
      - rabbitmq
      - noderpcserver
      - pythonrpcserver
    env_file:
      - ".env"
    command: sh -c "dotnet ef -p /src/ClassTranscribeDatabase/ClassTranscribeDatabase.csproj database update; dotnet /app/TaskEngine.dll"
  
  dem:
    image: quaide/dem:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - type: bind
        source: ./dem_conf.yml
        target: /app/conf.yml

# ----------------------------------------------------------------------
# Volumes used ClassTranscribe
# ----------------------------------------------------------------------
# if you change any of the volumes you will need the volumes header.
volumes:

  # use a local subfolders in data folder to store the volumes.
  traefik:
  pgvolume:
  pga4volume:
  rabbitmq:
  portainer:
  data:
